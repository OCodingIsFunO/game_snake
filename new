#!/usr/bin/env python

from luma.core.interface.serial import spi, noop
from luma.led_matrix.device import max7219
from luma.core.legacy import text, show_message
from luma.core.render import canvas
import RPi.GPIO as gpio
import time
from random import randint

gpio.setmode(gpio.BCM)
taster = [14,15,18,23]
height = 7
width = 8-1

serial = spi(port=0, device=0, gpio=noop())
device = max7219(serial)

def steuerung(gpio):
  global richtung
  if(gpio == 14):   #rechts
   richtung = [1,0]
  elif(gpio == 15): #oben
   richtung = [0,-1]
  elif(gpio == 18): #unten
   richtung = [0,1]
  elif(gpio == 23): #links
   richtung = [-1,0]

for i in taster:
   gpio.setup(i,gpio.IN,pull_up_down=gpio.PUD_DOWN)
   gpio.add_event_detect(i, gpio.RISING, callback=steuerung)

def startSpiel():
  global snake, richtung, apfel
  snake = [4,4]
  richtung = [0,0]
  while richtung == [0,0]:
    show_message(device, "READY", fill="white", scroll_delay=0.04)
  neuerApfel()

def neuerApfel():
  global apfel, snake
  apfelSnake = False
  while apfelSnake == False:
    apfelSnake = True
    x = randint(0,width)
    y = randint(0,height)
    apfel = [x,y]
    for i in snake:
      if(i == apfel):
        apfelSnake = False
  print(apfel)

def endOfGame():
  show_message(device, "GAME OVER", fill="white", scroll_delay=0.04)
  punkte = len(snake)-1
  show_message(device,"EREICHTE PUNKTE: "+ str(punkte), fill="white", scroll_delay=0.04)

  startSpiel()

startSpiel()

while True:
  keinePause = False
  newSnake = [snake[0][0]+richtung[0],
              snake[0][1]+richtung[1]]
  for i in snake:
    if(i == newSnake):
      endOfGame()
      pass

  if(newSnake == apfel):
     neuerApfel()
     keinePause = True

  else:
     snake.pop()
  snake.insert(0,newSnake)

  if(snake[0][0] > width or snake [0][1] > height
    or snake[0][0] < 0 or snake[0][1] < 0 ):
    endOfGame()
    pass


  device.clear()

  with canvas(device) as draw:
     for i in snake:
       draw.point(apfel, fill ="white")
       draw.point(i, fill ="white")

  if(keinePause == False):
    newLength = (len(snake)-2)*0.01
    time.sleep(0.5-newLength)
  else:
    time.sleep(0.4)
